#include <main.h>
#include <Arduino.h>

#include <ESP32-HUB75-MatrixPanel-I2S-DMA.h>
#include <Font4x5Fixed.h>
#include <Font4x7Fixed.h>
#include <Font5x5Fixed.h>
#include <Font5x7Fixed.h>
#include <SPIFFS.h>
#include <Preferences.h>

#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <AsyncHTTPSRequest_Generic.h>
#include <ArduinoJson.h>
#include <AsyncJson.h>

#include <time.h>
#include <Wire.h>
#include <RTClib.h>
#include <ESP32Time.h>




/**************
**	Globals  **
***************/

//TODO remove Tests
uint16_t testimg[64][64] = {{10502,10502,10502,10432,6925,6925,6925,6925,6925,6925,6925,6925,6925,24021,24021,24021,10432,10432,10432,6925,6925,24021,24021,24021,24021,24021,24021,24021,6925,24021,24021,24021,24021,24021,24021,6925,6925,10432,10432,10432,6925,6925,24021,24021,24021,24021,6925,6925,10432,10432,24021,24021,6925,6925,10432,10432,24021,6925,6925,10432,10432,10502,10502,10502},{10502,10502,10502,10432,6925,6925,6925,6925,6925,6925,6925,6925,24021,24021,10432,10432,10432,6925,6925,6925,24021,24021,24021,24021,24021,24021,24021,24021,24021,24021,24021,6925,24021,24021,24021,24021,6925,10432,10432,10432,6925,6925,6925,24021,24021,24021,6925,10432,10432,24021,6925,6925,6925,6925,10432,24021,6925,6925,10432,10432,10432,10502,10502,10502},{10502,10502,10432,6925,6925,6925,6925,24021,24021,6925,6925,6925,24021,10432,10432,6925,6925,6925,24021,24021,6925,6925,6925,6925,6925,24021,24021,24021,24021,24021,24021,24021,6925,24021,24021,24021,6925,6925,10432,10432,10432,6925,6925,24021,24021,6925,6925,10432,10432,10432,6925,6925,6925,10432,10432,24021,6925,6925,10432,10432,24021,10432,10502,10502},{10502,10502,10432,6925,6925,6925,6925,6925,24021,24021,24021,24021,24021,10432,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,24021,24021,24021,24021,24021,24021,24021,24021,6925,10432,10432,10432,6925,6925,24021,6925,6925,10432,10432,10432,10432,10432,6925,6925,10432,24021,6925,6925,6925,10432,10432,24021,10432,10502,10502},{10502,10432,6925,6925,6925,6925,6925,6925,24021,10432,10432,24021,10432,10432,6925,6925,10432,10432,10432,10432,10432,10432,10432,10432,6925,6925,6925,6925,6925,6925,6925,24021,24021,24021,6925,24021,24021,6925,6925,10432,10432,6925,6925,24021,6925,6925,10432,10432,10432,10432,10432,10432,10432,10432,6925,6925,6925,10432,10432,10432,24021,6925,10432,10502},{10502,10432,6925,6925,6925,6925,6925,6925,6925,24021,10432,10432,10432,10432,10432,10432,10432,10432,10432,10432,10432,10432,10432,10432,196,196,196,10432,6925,6925,6925,6925,24021,24021,24021,6925,24021,196,196,196,10432,6925,6925,6925,6925,10432,10432,24021,24021,10432,10432,10432,10432,6925,6925,10432,10432,10432,10432,10432,24021,6925,10432,10502},{10502,10432,6925,6925,6925,6925,6925,6925,6925,24021,10432,10432,10432,10432,10432,10432,10432,10432,10432,10432,10432,10432,196,196,36365,57306,57306,196,10432,6925,6925,6925,6925,24021,24021,6925,196,57306,57306,57306,196,196,24021,6925,10432,10432,24021,24021,6925,6925,10432,10432,10432,10432,10432,10432,24021,10432,10432,10432,10432,24021,10432,10502},{10502,10432,6925,6925,6925,6925,6925,6925,6925,6925,24021,10432,10432,10432,10432,10432,10432,10432,10432,10432,10432,196,36365,57306,57306,196,196,196,10432,10432,10432,6925,6925,6925,24021,24021,196,196,196,36365,36365,57306,196,6925,10432,10432,10432,24021,6925,6925,10432,10432,10432,10432,6925,6925,6925,24021,10432,10432,10432,24021,10432,10502},{10432,6925,6925,6925,6925,6925,6925,6925,6925,6925,24021,10432,10432,10432,10432,10432,10432,10432,24021,24021,196,36365,57306,196,196,24021,10432,10432,10432,10432,10432,10432,10432,6925,6925,24021,6925,6925,6925,196,196,36365,57306,196,10432,10432,10432,10432,6925,10432,10432,10432,6925,6925,6925,6925,6925,24021,10432,10432,10432,24021,6925,10432},{10432,6925,6925,6925,6925,6925,6925,6925,6925,6925,24021,10432,10432,10432,10432,24021,24021,24021,24021,196,36365,57306,196,24021,24021,24021,24021,24021,24021,10432,10432,10432,10432,10432,6925,6925,6925,6925,6925,10432,10432,196,36365,57306,196,24021,10432,10432,10432,10432,10432,6925,6925,6925,6925,6925,6925,24021,24021,10432,10432,24021,6925,10432},{10432,6925,6925,6925,6925,6925,6925,6925,6925,6925,24021,10432,10432,24021,24021,24021,24021,24021,24021,13130,57306,196,6925,6925,6925,6925,6925,6925,6925,24021,24021,24021,10432,10432,10432,6925,24021,6925,6925,10432,10432,6925,196,57306,196,6925,6925,10432,10432,10432,6925,24021,24021,24021,24021,6925,6925,6925,24021,10432,10432,24021,6925,10432},{10432,6925,6925,6925,6925,6925,6925,6925,6925,6925,24021,10432,24021,24021,24021,24021,24021,6925,13130,36365,57306,13130,10432,10432,10432,10432,10432,10432,6925,6925,6925,6925,24021,10432,10432,6925,6925,6925,6925,10432,10432,10432,13130,36365,57306,196,6925,10432,10432,6925,6925,6925,6925,6925,24021,24021,24021,24021,24021,10432,10432,10432,24021,10432},{10432,6925,6925,6925,6925,6925,6925,6925,6925,6925,24021,10432,6925,24021,24021,6925,6925,6925,13130,36365,57306,13130,10432,10432,10432,10432,10432,10432,10432,10432,10432,6925,6925,24021,10432,10432,6925,6925,10432,10432,10432,10432,13130,36365,57306,196,10432,10432,6925,10432,10432,10432,10432,10432,6925,6925,6925,24021,24021,6925,10432,10432,24021,10432},{10432,6925,6925,6925,6925,6925,6925,6925,6925,6925,24021,10432,10432,6925,6925,6925,10432,10432,13130,36365,57306,13130,10432,10432,10432,10432,10432,10432,10432,10432,10432,10432,10432,6925,24021,10432,10432,6925,10432,10432,10432,24021,13130,36365,57306,196,10432,10432,10432,6925,6925,24021,24021,10432,10432,10432,6925,6925,6925,10432,10432,10432,24021,64814},{10432,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,24021,10432,6925,10432,10432,10432,10432,10432,13130,57306,196,10432,10432,24021,24021,24021,24021,10432,10432,10432,10432,10432,10432,24021,10432,10432,6925,10432,10432,24021,6925,196,57306,196,10432,6925,6925,6925,6925,6925,6925,6925,24021,24021,10432,10432,10432,10432,10432,10432,24021,24021,64814},{10432,6925,6925,6925,6925,6925,10432,6925,6925,6925,6925,24021,10432,10432,10432,10432,10432,10432,10432,196,36365,57306,196,24021,24021,24021,24021,24021,24021,24021,24021,10432,10432,10432,6925,24021,10432,6925,10432,10432,10432,196,36365,57306,196,6925,6925,6925,6925,6925,6925,6925,6925,24021,24021,6925,10432,10432,10432,10432,24021,6925,64814,60237},{10432,6925,6925,6925,6925,6925,10432,6925,6925,6925,6925,24021,10432,10432,10432,10432,10432,24021,24021,24021,196,36365,57306,196,196,24021,24021,24021,24021,24021,24021,24021,10432,10432,10432,24021,10432,10432,10432,196,196,36365,57306,196,6925,6925,6925,24021,6925,6925,6925,6925,24021,24021,6925,6925,10432,10432,10432,24021,6925,64814,60237,10432},{10432,6925,6925,6925,6925,6925,10432,6925,10432,6925,6925,6925,24021,10432,10432,24021,24021,24021,24021,24021,6925,196,36365,57306,36365,13130,13130,196,196,196,196,196,196,196,196,196,196,13130,13130,36365,36365,57306,196,6925,6925,6925,6925,6925,6925,24021,24021,24021,24021,6925,6925,10432,10432,10432,24021,6925,6925,64814,60237,10432},{10432,6925,6925,6925,6925,6925,6925,10432,10432,6925,6925,6925,24021,10432,6925,6925,24021,24021,6925,24021,24021,24021,196,36365,57306,57306,13130,36365,57306,57306,57306,57306,57306,57306,57306,57306,36365,13130,57306,57306,57306,196,6925,6925,6925,6925,6925,6925,6925,6925,24021,24021,6925,6925,10432,10432,10432,10432,24021,6925,6925,64814,60237,10432},{10432,6925,6925,6925,6925,6925,6925,10432,6925,6925,6925,6925,24021,10432,10432,6925,6925,6925,24021,24021,24021,6925,196,13130,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,196,6925,6925,6925,6925,6925,6925,24021,24021,24021,6925,6925,10432,10432,10432,10432,24021,6925,6925,64814,60237,6925,10432},{10432,6925,6925,6925,6925,6925,10432,10432,6925,6925,6925,6925,24021,10432,10432,10432,6925,24021,24021,24021,6925,6925,10432,196,36365,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,196,6925,10432,10432,24021,24021,6925,24021,24021,6925,6925,6925,10432,10432,10432,10432,24021,6925,6925,64814,60237,6925,6925,10432},{10432,6925,6925,6925,6925,10432,10432,6925,6925,6925,10432,10432,10432,24021,10432,10432,6925,6925,24021,6925,6925,10432,10432,196,36365,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,196,10432,6925,10432,10432,24021,24021,24021,6925,6925,10432,10432,10432,10432,10432,10432,24021,6925,6925,64814,60237,6925,6925,10432},{10502,10432,6925,6925,6925,10432,6925,6925,10432,10432,10432,6925,6925,24021,10432,10432,10432,6925,6925,6925,10432,10432,24021,196,36365,57306,57306,196,196,57306,57306,57306,57306,57306,57306,196,196,57306,57306,57306,196,6925,24021,24021,6925,10432,6925,6925,6925,10432,10432,10432,10432,10432,10432,24021,6925,6925,64814,60237,60237,6925,10432,10502},{10502,10432,6925,6925,6925,10432,6925,6925,10432,6925,6925,6925,6925,6925,24021,10432,10432,10432,6925,10432,10432,24021,24021,196,36365,57306,196,196,196,196,57306,57306,57306,57306,196,196,196,196,57306,57306,196,6925,6925,24021,24021,6925,10432,10432,10432,10432,10432,24021,24021,6925,10432,24021,6925,6925,64814,60237,6925,6925,10432,10502},{10502,10432,6925,6925,6925,10432,10432,10432,6925,6925,6925,6925,6925,6925,24021,10432,24021,10432,10432,10432,6925,6925,6925,196,13130,57306,196,196,196,196,57306,57306,57306,57306,196,196,196,196,57306,57306,196,6925,6925,6925,24021,24021,6925,10432,10432,10432,24021,6925,6925,6925,6925,10432,24021,6925,64814,60237,6925,6925,10432,10502},{10502,10432,6925,6925,10432,10432,6925,6925,6925,6925,6925,6925,6925,24021,10432,10432,6925,24021,24021,10432,10432,6925,6925,196,13130,57306,196,196,196,196,57306,57306,57306,57306,196,196,196,196,57306,57306,196,6925,6925,6925,24021,24021,6925,10432,10432,10432,24021,6925,6925,6925,6925,6925,6925,6925,64814,60237,6925,6925,10432,10502},{10502,10502,10432,6925,10432,6925,6925,6925,6925,6925,6925,6925,6925,24021,10432,6925,6925,6925,6925,24021,10432,10432,6925,6925,196,57306,196,196,196,196,57306,57306,57306,57306,196,196,196,196,57306,196,6925,6925,24021,6925,24021,24021,10432,10432,10432,10432,24021,6925,6925,6925,6925,6925,6925,6925,64814,60237,6925,10432,10502,10502},{10502,10502,10432,10432,10432,6925,6925,6925,6925,6925,6925,6925,24021,6925,6925,6925,6925,6925,6925,6925,24021,10432,6925,6925,196,36365,57306,196,196,57306,57306,57306,57306,57306,57306,196,196,57306,57306,196,6925,6925,6925,24021,24021,6925,10432,10432,10432,24021,6925,6925,6925,6925,6925,6925,6925,6925,64814,60237,6925,10432,10502,10502},{10502,10502,10432,6925,6925,6925,6925,6925,6925,6925,6925,24021,10432,6925,6925,6925,6925,6925,6925,10432,24021,10432,6925,6925,196,13130,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,196,6925,6925,24021,24021,6925,10432,10432,10432,10432,24021,6925,6925,10432,6925,6925,6925,6925,6925,64814,60237,10432,10432,10502,10502},{10502,10502,10432,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,6925,10432,10432,24021,10432,10432,6925,196,196,36365,36365,57306,57306,57306,57306,57306,57306,57306,57306,57306,57306,196,6925,10432,24021,24021,6925,10432,10432,10432,10432,10432,24021,6925,6925,6925,10432,6925,6925,6925,6925,64814,60237,10432,10432,10502,10502},{10502,10502,10502,10432,6925,6925,6925,6925,6925,6925,10432,6925,6925,6925,6925,6925,6925,6925,10432,6925,6925,24021,10432,196,196,196,196,13130,13130,36365,36365,36365,36365,36365,36365,13130,13130,196,6925,6925,10432,6925,10432,10432,10432,10432,10432,10432,24021,6925,6925,6925,6925,6925,10432,10432,6925,6925,64814,60237,10432,10432,10502,10502},{10502,10502,10502,10432,6925,6925,6925,6925,6925,10432,6925,6925,6925,6925,6925,6925,6925,10432,10432,6925,6925,24021,10432,6925,196,196,196,196,196,196,196,196,196,196,196,196,6925,6925,6925,6925,10432,10432,10432,10432,10432,24021,10432,10432,24021,6925,6925,6925,6925,6925,6925,10432,10432,64814,60237,6925,10432,10432,10502,10502},{10502,10502,10502,10502,10432,6925,6925,6925,196,196,6925,6925,6925,6925,6925,6925,6925,10432,6925,6925,6925,24021,10432,10432,6925,196,196,196,196,196,196,196,196,196,196,196,196,6925,6925,6925,10432,10432,10432,24021,24021,6925,6925,10432,24021,6925,6925,6925,6925,6925,60237,60237,60237,64814,6925,10432,10432,10502,10502,10502},{10502,10502,10502,10502,196,196,196,6925,196,57306,196,196,6925,196,196,6925,6925,10432,6925,6925,10432,6925,24021,10432,196,196,196,196,196,8775,196,8775,8775,196,196,196,196,6925,6925,10432,10432,10432,24021,6925,6925,6925,6925,10432,24021,6925,6925,6925,60237,60237,64814,64814,64814,60237,10432,10432,10432,10502,10502,10502},{10502,10502,10502,196,196,57306,57306,196,36365,196,57306,196,196,196,57306,196,10432,10432,10432,10432,6925,6925,24021,10432,10432,196,196,196,13130,8775,8775,8775,8775,196,8775,196,196,196,6925,10432,10432,10432,24021,6925,6925,6925,6925,24021,6925,6925,6925,60237,64814,64814,64814,64814,64814,64814,60237,10432,10502,10502,10502,64814},{10502,196,196,57306,57306,196,57306,57306,196,36365,196,57306,57306,57306,57306,196,10432,6925,6925,6925,6925,6925,6925,24021,10432,6925,196,8775,13130,8775,13130,8775,8775,8775,8775,196,8775,196,10432,10432,10432,24021,6925,6925,6925,6925,6925,10432,6925,6925,10432,60237,64814,64814,60237,60237,64814,64814,60237,64814,64814,64814,64814,60237},{10502,10502,13130,196,196,13130,36365,36365,196,36365,36365,36365,57306,196,57306,196,196,6925,6925,6925,6925,6925,6925,24021,10432,196,13130,8775,13130,8775,13130,13130,8775,13130,13130,196,8775,8775,196,24021,6925,6925,6925,6925,6925,6925,10432,6925,6925,6925,60237,64814,64814,60237,60237,60237,64814,64814,60237,60237,60237,60237,60237,10502},{196,13130,36365,196,57306,57306,36365,196,196,36365,36365,36365,196,57306,196,196,57306,196,6925,6925,6925,6925,6925,6925,24021,196,8775,13130,13130,8775,13130,8775,13130,13130,196,8775,8775,13130,196,24021,6925,6925,6925,6925,10432,6925,10432,6925,6925,6925,60237,64814,64814,60237,60237,64814,64814,60237,10502,10502,10502,10502,10502,10502},{10502,196,196,57306,57306,36365,36365,196,57306,36365,196,196,196,57306,196,57306,57306,196,6925,6925,6925,6925,6925,6925,6925,196,8775,13130,8775,13130,13130,8775,13130,13130,196,8775,8775,13130,196,6925,6925,6925,6925,6925,6925,10432,10432,10432,6925,60237,60237,64814,64814,64814,64814,64814,60237,60237,60237,60237,60237,10502,10502,10502},{196,57306,36365,196,57306,36365,36365,36365,196,36365,196,36365,57306,57306,57306,57306,57306,196,6925,6925,6925,6925,6925,6925,196,13130,8775,13130,8775,13130,13130,8775,13130,13130,196,8775,8775,13130,8775,196,6925,6925,6925,6925,6925,6925,6925,6925,60237,64814,60237,60237,64814,64814,60237,60237,64814,64814,64814,64814,64814,60237,60237,10502},{57306,36365,36365,196,57306,36365,36365,196,57306,36365,36365,36365,36365,36365,57306,57306,57306,57306,196,6925,6925,6925,6925,6925,196,8775,13130,13130,8775,13130,8775,13130,13130,196,8775,13130,8775,13130,13130,196,6925,6925,6925,6925,6925,6925,6925,6925,60237,60237,60237,10432,60237,60237,64814,64814,64814,64814,64814,64814,64814,64814,64814,60237},{57306,36365,36365,36365,196,36365,36365,196,196,36365,36365,36365,36365,36365,36365,57306,57306,57306,196,6925,6925,6925,6925,6925,196,8775,13130,8775,13130,13130,8775,13130,13130,196,8775,13130,13130,8775,13130,196,6925,6925,6925,6925,6925,6925,6925,60237,64814,60237,10432,10502,10502,60237,64814,64814,64814,64814,64814,64814,64814,64814,64814,64814},{196,196,196,196,57306,36365,36365,36365,196,57306,36365,36365,196,196,36365,36365,57306,196,196,6925,6925,6925,6925,6925,196,13130,13130,8775,13130,13130,8775,13130,196,8775,13130,8775,13130,8775,13130,196,6925,6925,6925,6925,6925,6925,6925,60237,64814,60237,60237,60237,60237,64814,64814,64814,60237,60237,64814,64814,64814,64814,64814,64814},{19086,196,196,196,196,196,196,196,196,57306,57306,36365,196,196,196,36365,196,196,10432,6925,6925,6925,6925,196,13130,8775,8775,13130,13130,8775,13130,13130,196,8775,13130,8775,13130,8775,13130,13130,196,6925,6925,6925,6925,10432,60237,64814,60237,60237,64814,64814,60237,64814,64814,60237,60237,60237,60237,64814,64814,64814,64814,64814},{19086,19086,19086,196,196,196,196,196,196,196,196,36365,36365,196,196,36365,196,196,19086,10432,10432,10432,6925,196,8775,13130,13130,8775,8775,13130,13130,196,196,8775,13130,8775,13130,13130,8775,8775,196,196,10432,10432,10432,60237,64814,60237,64814,64814,60237,60237,60237,64814,64814,60237,60237,60237,60237,64814,64814,64814,64814,64814},{19086,16843,16843,16843,196,196,196,196,196,196,196,196,196,36365,36365,36365,196,19086,19086,19086,19086,19086,10432,196,13130,8775,8775,13130,13130,13130,196,196,196,196,13130,13130,8775,13130,13130,13130,196,196,19086,19086,19086,60237,60237,64814,60237,60237,16843,16843,60237,64814,64814,60237,60237,60237,60237,60237,64814,64814,64814,64814},{16843,16843,16843,16843,196,16843,196,196,196,196,196,196,196,196,196,196,19086,19086,19086,19086,19086,19086,19086,196,8775,13130,13130,13130,196,196,196,196,196,196,196,196,13130,8775,8775,13130,196,196,196,19086,19086,19086,60237,60237,60237,16843,16843,16843,16843,60237,64814,64814,60237,60237,60237,60237,64814,64814,64814,64814},{16843,16843,16843,16843,16843,16843,196,16843,196,16843,196,16843,196,16843,16843,16843,19086,19086,19086,19086,19086,19086,19086,196,13130,196,196,196,196,196,196,196,196,196,196,196,196,196,196,8775,196,196,196,196,19086,19086,16843,16843,16843,16843,19086,19086,16843,60237,64814,64814,64814,64814,60237,64814,64814,64814,64814,60237},{16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,19086,19086,19086,19086,19086,19086,19086,19086,196,196,19086,196,196,196,196,196,196,196,196,196,196,196,196,19086,196,196,19086,196,196,196,19086,19086,19086,19086,19086,19086,19086,16843,60237,64814,64814,64814,64814,64814,64814,64814,64814,64814,60237},{19086,19086,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,196,196,196,196,196,16843,16843,196,196,196,196,196,16843,19086,19086,19086,19086,19086,196,196,19086,19086,19086,19086,19086,19086,19086,16843,60237,60237,64814,64814,64814,64814,64814,60237,60237,16843},{19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,16843,16843,16843,196,196,196,16843,16843,16843,16843,16843,16843,196,196,196,16843,16843,16843,16843,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,16843,16843,60237,60237,60237,60237,60237,16843,16843,16843},{19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,16843,16843,16843,16843,196,196,16843,16843,16843,16843,16843,16843,16843,16843,196,196,16843,16843,16843,16843,16843,16843,16843,16843,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,16843,16843,16843,16843,16843,16843,16843,19086},{19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086},{19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,16843,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086},{19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086},{19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086},{19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086,19086},{14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730,14730},{10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502},{10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502},{10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502},{10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502},{10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502},{10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502,10502}};
unsigned long ms_test = 0;

//colors
const uint16_t color_twitch = 25108;
const uint16_t color_youtube = 0xF800;
const uint16_t color_coral = 0xFC10;

//bitmaps
const uint8_t icon_person[7] = {0x78, 0x48, 0x48, 0x78, 0x00, 0xfc, 0x84}; //6x7
const uint8_t icon_sun[7] = {0x10, 0x44, 0x38, 0xba, 0x38, 0x44, 0x10}; //7x7
const uint8_t icon_star[7] = {0x10, 0x38, 0xfe, 0x7c, 0x38, 0x6c, 0x44}; //7x7
const uint8_t icon_heart[7] = {0x66, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x18}; //8x7
const uint8_t icon_bell[7] = {0x00, 0x30, 0x78, 0xfc, 0xfc, 0x00, 0x10}; //6x7
const uint8_t icon_eye[14] = {0x1c, 0x00, 0x22, 0x00, 0x49, 0x00, 0x9c, 0x80, 0x49, 0x00, 0x22, 0x00, 0x1c, 0x00}; //9x7

const uint8_t icon_twitch[120] = {0x0f, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xf0, 0x30, 0x00, 0x00, 0x30, 0x70, 0x00, 0x00, 0x30, 0xf0, 0x00, 0x00, 0x30, 0xf0, 0x00, 0x00, 0x30, 0xf0, 0x00, 0x00, 0x30, 0xf0, 0x18, 0x0c, 0x30, 0xf0, 0x18, 0x0c, 0x30, 0xf0, 0x18, 0x0c, 0x30, 0xf0, 0x18, 0x0c, 0x30, 0xf0, 0x18, 0x0c, 0x30, 0xf0, 0x18, 0x0c, 0x30, 0xf0, 0x18, 0x0c, 0x30, 0xf0, 0x18, 0x0c, 0x30, 0xf0, 0x00, 0x00, 0x30, 0xf0, 0x00, 0x00, 0x30, 0xf0, 0x00, 0x00, 0x30, 0xf0, 0x00, 0x00, 0x30, 0xf0, 0x00, 0x00, 0x30, 0xf0, 0x00, 0x00, 0x70, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x01, 0xe0, 0xff, 0xf1, 0xff, 0xc0, 0xff, 0xf3, 0xff, 0x80, 0xff, 0xf7, 0xff, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}; //28x30
const uint8_t icon_youtube_base[96] = {0x0f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xf0}; //32x24
const uint8_t icon_youtube_play[24] = {0x80, 0x00, 0xc0, 0x00, 0xf0, 0x00, 0xfc, 0x00, 0xfe, 0x00, 0xff, 0x80, 0xff, 0x80, 0xfe, 0x00, 0xfc, 0x00, 0xf0, 0x00, 0xc0, 0x00, 0x80, 0x00}; //9x12

//slopes for mapping ranges to pixel width
//? (output_end - output_start) / (input_end - input_start)
const double slope_brightness = .196;
const double slope_diashow = 0;
const double slope_animation = 0;

//structs
enum overlay_type {
	OVERLAY_NONE,
	OVERLAY_BRIGHTNESS,
	OVERLAY_ANIMATION_SPEED,
	OVERLAY_DIASHOW_SPEED,
	OVERLAY_TEXT
};

enum display_mode {
	MODE_SOCIALS,
	MODE_IMAGES,
	MODE_CLOCK,
};

//settings
Preferences preferences;
bool volatile booted = false;
unsigned long ms_current = 0;
bool requested_reset = false;

overlay_type volatile overlay = OVERLAY_NONE;
const char* overlay_text = "";
unsigned long ms_overlay = 0;
uint8_t volatile brightness = 128;


//Wifi
bool wifi_connect = WIFI_CONNECT_DEFAULT;
bool wifi_host = WIFI_HOST_DEFAULT;
bool wifi_setup_complete = true;
const char* wifi_ssid = WIFI_SSID_DEFAULT;
const char* wifi_ap_ssid = WIFI_AP_SSID_DEFAULT;
const char* wifi_password = WIFI_PASSWORD_DEFAULT;
const char* wifi_ap_password = WIFI_AP_PASSWORD_DEFAULT;
unsigned long ms_wifi_routine = 0;
unsigned long ms_wifi_reconnect = 0;


//Server
AsyncWebServer server(80);
const char* api_key;
unsigned long ms_api_key_request = 0;
unsigned long ms_api_key_approve = 0;


//LED Panel
MatrixPanel_I2S_DMA *panel = nullptr;
display_mode current_mode = MODE_IMAGES;
bool volatile display_change = false;

uint16_t current_image[64][64] = {};

AsyncHTTPSRequest http_socials;
const char* socials_api_key = SOCIALS_API_KEY;
const char* socials_request_server = SOCIALS_API_SERVER;
unsigned long ms_socials_request = 0;
unsigned long socials_response_check = 0;
const char* socials_request = SOCIALS_REQUEST;
DynamicJsonDocument socials_response_doc(8000);
JsonArray socials_response = socials_response_doc.to<JsonArray>();
int socials_channel_current = 0;

//Interrupt flags
bool volatile rot1_a_flag = false;
bool volatile rot1_b_flag = false;
bool volatile rot2_a_flag = false;
bool volatile rot2_b_flag = false;
bool volatile rot3_a_flag = false;
bool volatile rot3_b_flag = false;

bool volatile btn1_pressed = false;
bool volatile btn2_pressed = false;
bool volatile btn3_pressed = false;
bool volatile rot1_pressed = false;
bool volatile rot2_pressed = false;
bool volatile rot3_pressed = false;
int volatile rot1_clicks = 0;
int volatile rot2_clicks = 0;
int volatile rot3_clicks = 0;


//RTC
RTC_DS3231 rtc_ext;
ESP32Time rtc_int(0);
bool rtc_ext_enabled = false;
const char* ntp_server = "pool.ntp.org";
const char* timezone = "CET-1CEST,M3.5.0,M10.5.0/3";
bool update_time = true;
bool rtc_ext_adjust = false;
unsigned long ms_rtc_ext_adjust = 0;



/**************
**	Socials  **
***************/

void on_socials_response(){
	if(http_socials.responseHTTPcode() == 200) {
		DeserializationError error = deserializeJson(socials_response_doc, http_socials.responseText());
		if(!error && socials_response_doc.is<JsonArray>()) {
			socials_response = socials_response_doc.as<JsonArray>();
			display_change = true;
		}
	}

	http_socials.abort();
	ms_socials_request = millis() + 25000;
}

void socials_refresh() {
	ms_socials_request = millis() + 25000;
	if(http_socials.readyState() == readyStateUnsent || http_socials.readyState() == readyStateDone) {
		char request_url[strlen(socials_request_server) + 9];
		strcpy(request_url, socials_request_server);
		strcat(request_url, "/socials");
		bool openResult = http_socials.open("POST", request_url);

		if(openResult) {
			http_socials.setReqHeader("Authorization", socials_api_key);
			http_socials.setReqHeader("Content-Type", "application/json");
			http_socials.setReqHeader("Accept", "application/json");
			if(http_socials.send(socials_request)) {
				socials_response_check = millis() + 250;
			}
		}
	}
}




/***********
**	Misc  **
************/
void rtc_internal_adjust() {
	DateTime time = rtc_ext.now();
	rtc_int.setTime(time.second(), time.minute(), time.hour(), time.day(), time.month(), time.year());
}

void rtc_external_adjust() {
	struct tm timeinfo;
	if(getLocalTime(&timeinfo, 500))
	{
		rtc_ext.adjust(DateTime(timeinfo.tm_year + 1900, timeinfo.tm_mon + 1, timeinfo.tm_mday, timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec));
	}
	rtc_ext_adjust = false;
	ms_rtc_ext_adjust = 0;
}

void wifi_on_connected() {
	configTzTime(timezone, ntp_server);
	ms_rtc_ext_adjust = millis() + 10000;
	rtc_ext_adjust = true;
	socials_refresh();
}

const char * generate_uid(){
  /* Change to allowable characters */
  const char possible[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  static char uid[33];
  for(int p = 0, i = 0; i < 32; i++){
    int r = random(0, strlen(possible));
    uid[p++] = possible[r];
  }
  uid[32] = '\0';
  return uid;
}

bool verify_api_key(AsyncWebServerRequest * request) {
	return request->hasHeader("apiKey") && request->getHeader("apiKey")->value().equals(api_key);
}




/**************
**	Display  **
**************/

//Display overlay menu for io switches
void display_overlay() {
	
	if(overlay != OVERLAY_NONE) {
		//Background
		panel->fillRect(0, 0, 64, 11, 0);
		
		if(overlay == OVERLAY_BRIGHTNESS) {
			//Progress Bar
			panel->drawRect(2, 2, 49, 7, 0xFFFF);

			//maps brightness range to progress bar width
			//? floor(output_start + (slope * (input - input_start)) + 0.5)
			panel->fillRect(4, 4, floor((1 + slope_brightness * (brightness - 24)) + .5), 3, 0xFFFF);
		
			//Sun icon
			panel->drawBitmap(54, 2, icon_sun, 7, 7, 0xFFFF);
		} else if(overlay == OVERLAY_ANIMATION_SPEED) {

		} else if(overlay == OVERLAY_DIASHOW_SPEED) {

		} else if(overlay == OVERLAY_TEXT) {

		}
	}
}

// load image into current pixelarray
void load_current_image(uint16_t pixels[64][64]) {
	for(int y = 0; y < 64; y++) {
		for(int x = 0; x < 64; x++) {
			current_image[y][x] = pixels[y][x];
		}
	}
}

// Display static images on led matrix by pixelarray
void display_full(uint16_t pixels[64][64], bool save_image = true) {
	for(int y = 0; y < 64; y++) {
		for(int x = 0; x < 64; x++) {
			if(save_image)
				current_image[y][x] = pixels[y][x];
			panel->drawPixel(x, y, pixels[y][x]);
		}
	}

	display_overlay();

	if(PANEL_DOUBLE_BUFFER)
		panel->flipDMABuffer();
}

//! Not working
//Display only changes of pixels for the next frame
void display_frame(int size, uint16_t *pixels[3]) {

	//TODO display current image

	for(int i = 0; i < size / 3; i++) {
		panel->drawPixel(pixels[i][0], pixels[i][1], pixels[i][2]);
	}

	display_overlay();

	if(PANEL_DOUBLE_BUFFER)
		panel->flipDMABuffer();
}

//Displays twitch channel with respective viewers / subs
void display_social_channel(const char * type, const char * channel, const char* subs, const char* views = "0") {

	//transparent background
	panel->clearScreen();

	//social icon
	if(strcmp(type, "t") == 0) {
			panel->drawBitmap(18, 2, icon_twitch, 28, 30, color_twitch);
	} else if (strcmp(type, "y") == 0) {
			panel->drawBitmap(16, 5, icon_youtube_base, 32, 24, color_youtube);
			panel->drawBitmap(28, 11, icon_youtube_play, 9, 12, 0xFFFF);
	}

	//text props
	int16_t x1, y1;
	uint16_t width, height;
	panel->setTextColor(0xFFFF);
	panel->setTextWrap(false);
	panel->setTextSize(1);
	panel->setFont(&Font4x7Fixed);

	//channel name
	if(channel == NULL || channel == "")
		channel = "Error";

	panel->getTextBounds(channel, 0, 0, &x1, &y1, &width, &height);
	panel->setCursor(64 > width ? .5 * (64 - width) : 0, 42);
	panel->write(channel);

	int textbox_start_position = 0;
	int textbox_offset = 0;

	//follows - subs
	if(subs != NULL && strcmp(subs, "") != 0 && strcmp(subs, "0") != 0) {
		if(strcmp(type, "t") == 0)
			textbox_offset = 10;
		else if (strcmp(type, "y") == 0)
			textbox_offset = 8;
		panel->getTextBounds(subs, 0, 0, &x1, &y1, &width, &height);
		textbox_start_position = 64 - textbox_offset > width ? .5 * (64 - textbox_offset - width) : 0;
		panel->setCursor(textbox_start_position + textbox_offset, 52);
		panel->write(subs);
	}

	//subs icon
	if(strcmp(type, "t") == 0)
		panel->drawBitmap(textbox_start_position, 45, icon_heart, 8, 7, color_twitch);
	else if (strcmp(type, "y") == 0)
		panel->drawBitmap(textbox_start_position, 45, icon_bell, 6, 7, 0xFFFF);

	//views
	if(views != NULL && strcmp(views, "") != 0 && strcmp(views, "0") != 0) {
		textbox_offset = 0;
		if(strcmp(type, "t") == 0)
			textbox_offset = 8;
		else if (strcmp(type, "y") == 0)
			textbox_offset = 11;
		panel->getTextBounds(views, 0, 0, &x1, &y1, &width, &height);
		textbox_start_position = 64 - textbox_offset > width ? .5 * (64 - textbox_offset - width) : 0;
		panel->setCursor(textbox_start_position + textbox_offset, 62);
		panel->write(views);

		//views icon
		if(strcmp(type, "t") == 0)
			panel->drawBitmap(textbox_start_position, 55, icon_person, 6, 7, color_coral);
		if(strcmp(type, "y") == 0)
			panel->drawBitmap(textbox_start_position, 55, icon_eye, 9, 7, 0xFFFF);
	}

	display_overlay();

	//print on screen
	if(PANEL_DOUBLE_BUFFER)
		panel->flipDMABuffer();
}

void display_current() {
	switch(current_mode) {
		case MODE_SOCIALS:
			//go to next mode if wifi wont be connected
			if(!wifi_connect)
				current_mode = MODE_IMAGES;

			if(socials_response.size() > 0) {
				if(socials_response.size() < socials_channel_current)
					socials_channel_current = 0;
				display_social_channel(socials_response[socials_channel_current]["t"].as<const char*>(), socials_response[socials_channel_current]["d"].as<const char*>(), socials_response[socials_channel_current]["f"].as<const char*>(), socials_response[socials_channel_current]["v"].as<const char*>());
			} else {
				display_social_channel("", "Loading", "");
			}
			break;
		default:
			display_full(current_image, false);
	}
}




/************
**	SPFFS  **
*************/

void spffs_setup() {
	//TODO waiting for sd card module
}





/*****************
**	Interrupts  **
******************/

void IRAM_ATTR trigger_btn1() {
	btn1_pressed = true;
}

void IRAM_ATTR trigger_btn2() {
	btn2_pressed = true;
}

void IRAM_ATTR trigger_btn3() {
	btn3_pressed = true;
}


void IRAM_ATTR trigger_rot1_a() {
	if(rot1_a_flag && digitalRead(GPIO_ROT1_B) == LOW) {
		rot1_a_flag = false;
		rot1_b_flag = false;
		rot1_clicks--;
	} else {
		rot1_b_flag = true;
	}
}

void IRAM_ATTR trigger_rot1_b() {
	if(rot1_b_flag && digitalRead(GPIO_ROT1_A) == LOW) {
		rot1_a_flag = false;
		rot1_b_flag = false;
		rot1_clicks++;
	} else {
		rot1_a_flag = true;
	}
}

void IRAM_ATTR trigger_rot1_btn() {
	rot1_pressed = true;
}


void IRAM_ATTR trigger_rot2_a() {
	if(rot2_a_flag && digitalRead(GPIO_ROT2_B) == LOW) {
		rot2_a_flag = false;
		rot2_b_flag = false;
		rot2_clicks--;
	} else {
		rot2_b_flag = true;
	}
}

void IRAM_ATTR trigger_rot2_b() {
	if(rot2_b_flag && digitalRead(GPIO_ROT2_A) == LOW) {
		rot2_a_flag = false;
		rot2_b_flag = false;
		rot2_clicks++;
	} else {
		rot2_a_flag = true;
	}
}

void IRAM_ATTR trigger_rot2_btn() {
	rot2_pressed = true;
}


void IRAM_ATTR trigger_rot3_a() {
	if(rot3_a_flag && digitalRead(GPIO_ROT3_B) == LOW) {
		rot3_a_flag = false;
		rot3_b_flag = false;
		rot3_clicks--;
	} else {
		rot3_b_flag = true;
	}
}

void IRAM_ATTR trigger_rot3_b() {
	if(rot3_b_flag && digitalRead(GPIO_ROT3_A) == LOW) {
		rot3_a_flag = false;
		rot3_b_flag = false;
		rot3_clicks++;
	} else {
		rot3_a_flag = true;
	}
}

void IRAM_ATTR trigger_rot3_btn() {
	rot3_pressed = true;
}




/************
**	Setup  **
*************/

//Initialize GPIO Pins
void gpio_setup() {

	//Turning off onboard led
	pinMode(48, PULLDOWN);

	//Setting PinModes
	pinMode(GPIO_BTN1, PULLUP);
	pinMode(GPIO_BTN2, PULLUP);
	pinMode(GPIO_BTN3, PULLUP);
	pinMode(GPIO_ROT1_A, PULLUP);
	pinMode(GPIO_ROT1_B, PULLUP);
	pinMode(GPIO_ROT1_BTN, PULLUP);
	pinMode(GPIO_ROT2_A, PULLUP);
	pinMode(GPIO_ROT2_B, PULLUP);
	pinMode(GPIO_ROT2_BTN, PULLUP);
	pinMode(GPIO_ROT3_A, PULLUP);
	pinMode(GPIO_ROT3_B, PULLUP);
	pinMode(GPIO_ROT3_BTN, PULLUP);

	//Setting interrupts
	attachInterrupt(GPIO_BTN1, trigger_btn1, FALLING);
	attachInterrupt(GPIO_BTN2, trigger_btn2, FALLING);
	attachInterrupt(GPIO_BTN3, trigger_btn3, FALLING);
	attachInterrupt(GPIO_ROT1_A, trigger_rot1_a, FALLING);
	attachInterrupt(GPIO_ROT1_B, trigger_rot1_b, FALLING);
	attachInterrupt(GPIO_ROT1_BTN, trigger_rot1_btn, FALLING);
	attachInterrupt(GPIO_ROT2_A, trigger_rot2_a, FALLING);
	attachInterrupt(GPIO_ROT2_B, trigger_rot2_b, FALLING);
	attachInterrupt(GPIO_ROT2_BTN, trigger_rot2_btn, FALLING);
	attachInterrupt(GPIO_ROT3_A, trigger_rot3_a, FALLING);
	attachInterrupt(GPIO_ROT3_B, trigger_rot3_b, FALLING);
	attachInterrupt(GPIO_ROT3_BTN, trigger_rot3_btn, FALLING);

	Wire.setPins(GPIO_RTC_SDA, GPIO_RTC_SCL);
  	Wire.begin();

}

// Initialize LED Matrix
void panel_setup() {

	HUB75_I2S_CFG mxconfig(
		64,
		64,
		1,
		{
			GPIO_LEDPANEL_R1,
			GPIO_LEDPANEL_G1,
			GPIO_LEDPANEL_B1,
			GPIO_LEDPANEL_R2,
			GPIO_LEDPANEL_G2,
			GPIO_LEDPANEL_B2,
			GPIO_LEDPANEL_A,
			GPIO_LEDPANEL_B,
			GPIO_LEDPANEL_C,
			GPIO_LEDPANEL_D,
			GPIO_LEDPANEL_E,
			GPIO_LEDPANEL_LAT,
			GPIO_LEDPANEL_OE,
			GPIO_LEDPANEL_CLK
		},
		PANEL_DRIVER,
		PANEL_DOUBLE_BUFFER,
		PANEL_I2C_SPEED,
		PANEL_LATCH_BLINK,
		PANEL_CLOCK_PHASE
	);

	// Display Setup
	panel = new MatrixPanel_I2S_DMA(mxconfig);
	panel->begin();
	panel->clearScreen();
	panel->setPanelBrightness(brightness);

	if(PANEL_DOUBLE_BUFFER)
		panel->flipDMABuffer();

}

//Server setup
void server_setup() {
	if(WiFi.getMode() != WIFI_MODE_NULL) {
		server.begin();

		server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
			//TODO Point to sd card if arrived
			request->send(200, "text/plain", "Hello");
		});

		server.on("/status", HTTP_GET, [](AsyncWebServerRequest * request) {
			if(verify_api_key(request)) {
				AsyncJsonResponse *response = new AsyncJsonResponse();
				response->setContentType("application/json");
				response->setCode(200);
				JsonVariant& root = response->getRoot();

				root["onTime"] = ms_current;
				root["wifiAP"] = wifi_connect;
				root["wifiSTA"] = wifi_host;
				root["wifiSetupComplete"] = wifi_setup_complete;
				root["wifiIP"] = WiFi.localIP();
				root["wifiAPIP"] = WiFi.softAPIP();
				root["wifiHostname"] = WiFi.getHostname();
				root["time"] = rtc_int.getLocalEpoch();
				root["timeExtConnected"] = rtc_ext_enabled;
				root["displayMode"] = current_mode;

				response->setLength();
				request->send(response);
			} else {
				request->send(403, "application/json", "{}");
			}
		});

		server.on("/settings", HTTP_GET, [](AsyncWebServerRequest * request) {
			if(verify_api_key(request)) {
				AsyncJsonResponse *response = new AsyncJsonResponse();
				response->setContentType("application/json");
				response->setCode(200);
				JsonVariant& root = response->getRoot();

				root["brightness"] = brightness;
				root["wifiConnect"] = wifi_connect;
				root["wifiHost"] = wifi_host;
				root["wifiSSID"] = wifi_ssid;
				root["wifiAPSSID"] = wifi_ap_ssid;
				root["wifiAPPassword"] = wifi_ap_password;
				root["updateTime"] = update_time;
				root["ntpServer"] = ntp_server;
				root["timezone"] = timezone;
				
				response->setLength();
				request->send(response);
			} else {
				request->send(403, "application/json", "{}");
			}
		});

		server.on("/settings", HTTP_POST, [](AsyncWebServerRequest * request) {
			if(verify_api_key(request)) {
				//TODO set settings
				request->send(200, "application/json", "{}");
			} else {
				request->send(403, "application/json", "{}");
			}
		});

		server.on("/apiKey", HTTP_DELETE, [](AsyncWebServerRequest * request) {
			if(verify_api_key(request)) {
				preferences.begin(PREFERENCES_NAMESPACE, false);
				api_key = generate_uid();
				preferences.putString("api_key", api_key);
				preferences.end();
				request->send(200);
			} else {
				request->send(403, "application/json", "{}");
			}
		});

		server.on("/apiKey", HTTP_GET, [](AsyncWebServerRequest * request) {
			AsyncJsonResponse *response = new AsyncJsonResponse();
			response->setContentType("application/json");
			JsonVariant& root = response->getRoot();

			if(ms_api_key_approve > millis()) {
				response->setCode(200);
				root["apiKey"] = api_key;
				ms_api_key_approve = 0;
				ms_api_key_request = 0;
			} else {
				ms_api_key_request = millis() + 5000;
				request->send(204, "application/json", "{}");
			}
			
			response->setLength();
			request->send(response);
		});

		server.on("/reset", HTTP_GET, [](AsyncWebServerRequest * request) {
			if(verify_api_key(request)) {
				preferences.begin(PREFERENCES_NAMESPACE, false);
				preferences.clear();
				preferences.end();
				request->send(200);
				requested_reset = true;
			} else {
				request->send(403, "application/json", "{}");
			}
		});
	}
}

// Initialize Wifi if enabled
void wifi_setup() {

	WiFi.setHostname(WIFI_HOSTNAME);
	WiFi.setAutoReconnect(true);
	ms_wifi_reconnect = millis() + 60000;
	wifi_setup_complete = true;

	if(wifi_connect) {
		WiFi.begin(wifi_ssid, wifi_password);
		WiFi.waitForConnectResult(250);
		wifi_setup_complete = false;
	} else if(wifi_host) {
		WiFi.softAP(wifi_ap_ssid, wifi_ap_password);
	}
}

//Load preferences from flash
void preferences_load() {

	preferences.begin(PREFERENCES_NAMESPACE, false);
	
	//settings
	if(preferences.isKey("brightness"))
		brightness = preferences.getShort("brightness", brightness);
	if(preferences.isKey("current_mode"))
		current_mode = static_cast<display_mode>(preferences.getInt("current_mode", current_mode));
	
	//wifi
	if(preferences.isKey("wifi_connect"))
		wifi_connect = preferences.getBool("wifi_connect", WIFI_CONNECT_DEFAULT);

	if(preferences.isKey("wifi_host"))
		wifi_host = preferences.getBool("wifi_host", WIFI_HOST_DEFAULT);
	
	if(preferences.isKey("wifi_ssid"))
		wifi_ssid = strdup(preferences.getString("wifi_ssid", WIFI_SSID_DEFAULT).c_str());
	
	if(preferences.isKey("wifi_ap_ssid"))
		wifi_ap_ssid = strdup(preferences.getString("wifi_ap_ssid", WIFI_AP_SSID_DEFAULT).c_str());
	
	if(preferences.isKey("wifi_password"))
		wifi_password = strdup(preferences.getString("wifi_password", WIFI_PASSWORD_DEFAULT).c_str());
	
	if(preferences.isKey("wifi_ap_password"))
		wifi_ap_password = strdup(preferences.getString("wifi_ap_password", WIFI_AP_PASSWORD_DEFAULT).c_str());

	//ntp
	if(preferences.isKey("ntpServer"))
		ntp_server = strdup(preferences.getString("ntpServer", ntp_server).c_str());

	if(preferences.isKey("timezone"))
		timezone = strdup(preferences.getString("timezone", timezone).c_str());

	if(preferences.isKey("update_time"))
		update_time = preferences.getBool("update_time", update_time);

	//Server
	if(preferences.isKey("api_key")) {
		api_key = strdup(preferences.getString("api_key", api_key).c_str());
	} else {
		api_key = generate_uid();
		preferences.putString("api_key", api_key);
	}

	//APIs
	if(preferences.isKey("socials_request"))
		socials_request = strdup(preferences.getString("socials_request", socials_request).c_str());

	if(preferences.isKey("socials_api_key"))
		socials_api_key = strdup(preferences.getString("socials_api_key", socials_api_key).c_str());

	if(preferences.isKey("socials_server"))
		socials_request_server = strdup(preferences.getString("socials_server", socials_request_server).c_str());

	if(preferences.isKey("current_social"))
		socials_channel_current = preferences.getInt("current_social", socials_channel_current);


	preferences.end();
}

//Init rtc
void time_setup() {

	setenv("TZ", timezone, 1);
	tzset();
	if(rtc_ext.begin()) {
		rtc_ext.disable32K();
		rtc_ext.disableAlarm(1);
		rtc_ext.disableAlarm(2);
		rtc_ext.clearAlarm(1);
		rtc_ext.clearAlarm(2);
		rtc_ext_enabled = true;
		rtc_internal_adjust();
	}
}

void booted_setup() {
	bool volatile btn1_pressed = false;
	bool volatile btn2_pressed = false;
	bool volatile btn3_pressed = false;
	bool volatile rot1_pressed = false;
	bool volatile rot2_pressed = false;
	bool volatile rot3_pressed = false;
	int volatile rot1_clicks = 0;
	int volatile rot2_clicks = 0;
	int volatile rot3_clicks = 0;
	booted = true;
}

void setup() {
	Serial.begin(9600); //TODO remove after testing

	preferences_load();
	gpio_setup();
	time_setup();
	wifi_setup();
	server_setup();
	spffs_setup();
	panel_setup();

	load_current_image(testimg);
	display_current();
	
	booted_setup(); //TODO move after boot sequence if implemented
}




/***********
**	Loop  **
************/

void loop() {

	ms_current = millis();

	//display changes
	if(booted) {

		//diashow speed rot
		if(rot1_clicks != 0) {

			rot1_clicks = 0;
		}

		//animation speed rot
		if(rot2_clicks != 0) {
			//TODO

			rot2_clicks = 0;
		}

		//brightness rot
		if(rot3_clicks != 0) {

			if((rot3_clicks > 0 && brightness < 248) || (rot3_clicks < 0 && brightness > 24)) {
				brightness += rot3_clicks * 8;
			}
			overlay = OVERLAY_BRIGHTNESS;
			ms_overlay = ms_current + 3000;
			panel->setPanelBrightness(brightness);
			display_change = true;

			preferences.begin(PREFERENCES_NAMESPACE);
			preferences.putShort("brightness", brightness);
			preferences.end();

			rot3_clicks = 0;
		}

		//next button
		if(btn1_pressed) {
			if(current_mode == MODE_SOCIALS) {
				socials_channel_current = (socials_channel_current + 1) % socials_response.size();
				preferences.begin(PREFERENCES_NAMESPACE);
				preferences.putInt("current_social", socials_channel_current);
				preferences.end();
				display_change = true;
			}

			btn1_pressed = false;
		}

		//mode button
		if(btn2_pressed) {
			current_mode = static_cast<display_mode>((current_mode + 1) % 3);
			display_change = true;

			preferences.begin(PREFERENCES_NAMESPACE);
			preferences.putInt("current_mode", static_cast<int32_t>(current_mode));
			preferences.end();
			
			btn2_pressed = false;
		}

		//menu button
		if(btn3_pressed) {
			//approve api key for server if requested
			if(ms_api_key_request > ms_current) {
				ms_api_key_approve = ms_current + 5000;
				ms_api_key_request = 0;
			}
			
			btn3_pressed = false;
		}


		//rot1 button
		if(rot1_pressed) {
			//TODO
			
			rot1_pressed = false;
		}

		//rot2 button
		if(rot2_pressed) {
			//TODO
			
			rot2_pressed = false;
		}

		//rot3 button
		if(rot3_pressed) {
			//TODO
			
			rot3_pressed = false;
		}


		//check overlay time
		if(ms_overlay != 0 && ms_overlay < ms_current) {
			overlay = OVERLAY_NONE;
			ms_overlay = 0;
			display_change = true;
		}

		//refresh display if needed
		if(display_change) {
			display_change = false;
			display_current();
		}
	}

	//Wifi routine
	if(!wifi_setup_complete && ms_wifi_routine <= ms_current) {
		ms_wifi_routine = ms_current + 5000;
		if(WiFi.waitForConnectResult(100) == WL_CONNECTED) {
			wifi_setup_complete = true;
			wifi_on_connected();
		} else if(ms_wifi_reconnect <= ms_current) {
			wifi_setup();
		}
	}

	//RTC adjustment after message received
	if(rtc_ext_adjust && ms_rtc_ext_adjust <= ms_current) {
		rtc_external_adjust();
	}

	//Execute reset from api request
	if(requested_reset) {
		ESP.restart();
	}

	//Routine for async http
	if(socials_response_check != 0 && socials_response_check <= ms_current) {
		if(http_socials.readyState() == readyStateDone) {
			socials_response_check = 0;
			on_socials_response();
		} else {
			socials_response_check += 500;
		}
	} else if(ms_socials_request != 0 && ms_socials_request <= ms_current) {
		ms_socials_request = ms_current + 25000;
		socials_refresh();
	}

	//TODO remove tests
	if(ms_test <= ms_current) {
		ms_test = ms_current + 3000;
		
		// Serial.println(WiFi.localIP().toString());
		// Serial.println(rtc_int.getDateTime());
		// Serial.println(rtc_ext.now().timestamp());
		// Serial.println(api_key);
		// Serial.println(ESP.getFreeHeap());
		// Serial.println(http_socials.readyState());
		// Serial.println(socials_response.size());
		// Serial.println(brightness);
	}
}